
var Convex = require('../lib/convex');
var Debug = require('../lib/debug');

describe('Convex', () => {
    var convexPolys = {
        box: [[0, 0], [1, 0], [1, 1], [0, 1]],
        triangle: [[0, 0], [0, 1], [.5, .5]],
        roundPoly: [[0, 0], [1, 0], [2, 2], [3, 5], [2, 8], [0, 6]],
        polyWithColinearSides: [[0, 0], [1, 0], [2, 2], [3, 5], [2, 8], [0, 6], [0, 2]]
    };

    var concavePolys = {
        indentedBox: [[0, 0], [1, 1], [2, 1], [3, 0], [3, 2], [0, 2]],
        collapsedBox: [[0, 0], [1, 0], [1, 1], [0.6, .5]],
        tie: [[0, 0], [1, 0], [2, 2], [3, 5], [2, 8], [0, 6], [.1, 2]],
        wavyToppedBlock: [[400, 200], [400, 174], [396, 177], [383, 174], [381, 174], [372, 174], [368, 170], [356, 170], [353, 166], [350, 166], [350,200]],
        hourglass: [[0, 0], [3, 0], [2, 1], [3, 2], [0, 2], [1, 1]],
        rainbow: [[0, 115], [21, 50], [84, 0], [169, 25], [201, 112], [154, 112], [126, 63], [79, 64], [44, 113]],
        gameExampleCC1: [[2613.5454545454545, 4940], [2460, 4940], [2460, 5139.28], [2467, 5139], [2519, 5172], [2538, 5228], [2510, 5274], [2480, 5294], [2480.277777777778, 5295], [2460, 5295], [2460, 5340], [2509.7323943661972, 5340], [2510.321504237288, 5319.0865995762715], [2544, 5301], [2552, 5279], [2563, 5270], [2586, 5253], [2610, 5217], [2609, 5133], [2553, 5132], [2516, 5105], [2507.301886792453, 5070.207547169812], [2504, 5022], [2520, 4975], [2561, 4948], [2607, 4944]],
        gameExampleCC2: [[2367, 5499], [2460, 5499], [2460, 5340], [2060, 5340], [2325, 5346], [2395, 5346], [2395, 5406], [2325, 5406], [2325, 5346], [2060, 5340]],
        gameExampleCC3: [[1099, 3983], [1582, 3982], [1550, 3996], [1538, 4060], [1481, 4058], [1463, 4097], [1439, 4104], [1434, 4056], [1363, 4056], [1366, 4120], [1427, 4120], [1405, 4149], [1378, 4155], [1346, 4137], [1315, 4103], [1285, 4120], [1262, 4174], [1230, 4187], [1222, 4224], [1222, 4253], [1197, 4264], [1186, 4286], [1186, 4370], [1148, 4393], [1149, 4490], [1175, 4498], [1189, 4522], [1180, 4548], [1194, 4571], [1227, 4587], [1221, 4624], [1237, 4653], [1258, 4659], [1301, 4721], [1098, 4720], [1076, 4697], [1025, 4695], [1022, 4584], [1056, 4567], [1059, 4544], [1098, 4521], [1096, 4492], [1082, 4467], [1059, 4453], [1062, 4403], [1020, 4372], [1014, 4313], [979, 4292], [977, 4221], [1022, 4201], [1018, 4107], [1055, 4083], [1065, 4059], [1101, 4036]],
        gameExampleCC4: [[1582, 3982], [1260, 3982.6666666666665], [1260, 4140], [1276.4814814814815, 4140], [1285, 4120], [1315, 4103], [1346, 4137], [1351.3333333333333, 4140], [1411.8275862068965, 4140], [1427, 4120], [1366, 4120], [1363, 4056], [1434, 4056], [1439, 4104], [1463, 4097], [1481, 4058], [1538, 4060], [1550, 3996]],
        gameExampleCC5: [[3260, 1740], [3260, 1340], [3182.1111111111113, 1340], [3171, 1365], [3135, 1385], [3137, 1445], [3095, 1463], [3093, 1520], [3118, 1526], [3118, 1581.206106870229], [2883, 1583], [2883, 1526], [2910, 1525], [2895, 1498], [2860, 1479], [2872, 1441], [2864, 1431], [2860, 1431.4177215189873], [2860, 1740], [2938.3636363636365, 1740], [2937, 1738], [2917, 1732], [2903, 1691], [2885, 1687], [2882, 1645], [3118, 1645], [3118, 1690], [3094, 1691], [3095, 1726], [3112.266666666667, 1740]]
    };

    describe('#isConvex', () => {
        describe('should properly identify convex polygons', () => {
            it.each(Object.keys(convexPolys))('%s', (polyName) => {
                expect(Convex.isConvex(convexPolys[polyName])).toBe(true);
            });
        });

        describe('should properly identify concave polygons', () => {
            it.each(Object.keys(concavePolys))('%s', (polyName) => {
                expect(Convex.isConvex(concavePolys[polyName])).toBe(false);
            });
        });
    });

    describe('#makeConvex', () => {
        describe('should break down concave polygons into convex polygons', () => {
            it.each(Object.keys(concavePolys))('%s', (polyName) => {
                var convexParts = Convex.makeConvex(concavePolys[polyName]);
                console.log(polyName + ': ' + Debug.getRegionCollectionLog(3, [[concavePolys[polyName]], convexParts]));
                expect(convexParts.every((subPoly) => Convex.isConvex(subPoly))).toBe(true);
            });
        });
    });
});
